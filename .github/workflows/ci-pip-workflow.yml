name: Pip CI

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:

jobs:
  tests:
    defaults:
      run:
        shell: bash

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux Minimum Setup
            os: ubuntu-latest
            python-version: "3.8"
            numpy-pkg: 'numpy>=1.20,<1.21'
            install-type: develop
            test-data: none

          - name: Linux Build (w/o Xspec; Python 3.10)
            os: ubuntu-latest
            python-version: "3.10"
            numpy-pkg: 'numpy'
            install-type: install
            test-data: package
            fits-pkg: 'astropy'
            matplotlib-pkg: 'matplotlib>=3,<4'

          - name: Linux Build (w/o Astropy or Xspec)
            os: ubuntu-latest
            python-version: "3.9"
            numpy-pkg: 'numpy'
            install-type: install
            test-data: package
            matplotlib-pkg: 'matplotlib>=3,<4'

          - name: Linux Build (w/o Matplotlib, Xspec, or test data)
            os: ubuntu-latest
            python-version: "3.8"
            numpy-pkg: 'numpy'
            install-type: develop
            fits-pkg: 'astropy'
            test-data: none

          - name: Linux Build (submodule data w/o Matplotlib or Xspec)
            os: ubuntu-latest
            python-version: "3.9"
            numpy-pkg: 'numpy'
            install-type: develop
            fits-pkg: 'astropy'
            test-data: submodule

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3.1.0
      with:
        submodules: 'True'

    - name: Pip Testing Setup - Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Pip Testing Setup - Dependencies
      env:
        NUMPYVER: ${{ matrix.numpy-pkg }}
        FITSBUILD: ${{ matrix.fits-pkg }}
        MATPLOTLIBVER: ${{ matrix.matplotlib-pkg }}
      run: |
        # In case we forget to set matrix.numpy-pkg
        if [ ! -n "${NUMPYVER}" ] ; then
          NUMPYVER='numpy'
        fi
        pip install ${NUMPYVER} ${FITSBUILD} ${MATPLOTLIBVER}
        # Ensure we use an old-enough setuptools: see issue #1456
        pip install 'setuptools < 60'

    - name: Build Sherpa (install)
      if: matrix.install-type == 'install'
      run: |
        pip install . --verbose

    - name: Build Sherpa (develop)
      if: matrix.install-type == 'develop'
      run: |
        pip install -e . --verbose

    - name: install pytest-xvfb
      if: matrix.test-data == 'package'
      run: |
        pip install pytest-xvfb

    - name: sherpa_test with test-data=${{ matrix.test-data }}
      if: matrix.test-data == 'package' || matrix.test-data == 'none'
      env:
        TEST: ${{ matrix.test-data }}
      run: |
        git submodule deinit -f .
        pip install pytest-cov
        sherpa_test --cov=sherpa --cov-report=xml

    - name: Submodule test with pytest
      if: matrix.test-data == 'submodule'
      run: |
        pip install -r test_requirements.txt
        pip install pytest-cov

        pytest --cov=sherpa --cov-report=xml

    - name: upload coverage
      uses: codecov/codecov-action@v3
      with:
        # only select the reports that we know are coverage reports, from linux conda, mac conda, and pip
        files: /home/runner/work/sherpa/sherpa/coverage.xml,/Users/runner/work/sherpa/sherpa/coverage.xml,/home/runner/coverage.xml
        verbose: true

    - name: Smoke Test
      env:
        FITS: ${{ matrix.fits-pkg }}
      run: |
        smokevars="-v 3"
        if [ ${FITS} != '' ] ; then
            smokevars="-f ${FITS} ${smokevars}"
        fi
        echo "** smoke test: ${smokevars}"
        cd ${HOME}
        sherpa_smoke ${smokevars}
